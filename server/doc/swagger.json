{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Property-Pro-Lite API",
    "description": "This is the API Documentation for Property Pro Lite - Property Pro Lite is a platform where people can create and/or search properties for sale or rent.",
    "contact": {
      "email": "samuelkoroh@gmail.com"
    }
  },
  "schemes": ["http"],
  "host": "localhost:3500",
  "basePath": "/api/v1",
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register user",
        "description": "This endpoint allow users to register with the system as either (regular or agent). Note: it only admin and agent as the access to upload property adverts.",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "required": true
          },
          {
            "name": "password",
            "in": "formData",
            "required": true
          },
          {
            "name": "first_name",
            "in": "formData",
            "required": true
          },
          {
            "name": "last_name",
            "in": "formData",
            "required": true
          },
          {
            "name": "phone_number",
            "in": "formData",
            "required": true
          },
          {
            "name": "address",
            "in": "formData",
            "required": true
          },
          {
            "name": "user_type",
            "in": "formData",
            "required": true
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#definitions/Authenticated"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "500": {
            "$ref": "#responses/Standard500Error"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Login using valid credential to gain access to your profile <br/><br/> <strong style='color:red'>Note:</strong> Default admin user login credentials is:<br/><br/> <strong style='color:red'>email:</strong> admin@gmail.com, <br/><br/> <strong style='color:red'>password:</strong> admin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "valid login credentials",
            "schema": {
              "$ref": "#definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "login successful",
            "schema": {
              "$ref": "#definitions/Authenticated"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "500": {
            "$ref": "#responses/Standard500Error"
          }
        }
      }
    },
    "/auth/{email}/reset-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Request password reset",
        "description": "Register user can request password reset if the correct email used in registering the profile is supplied",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#responses/SuccessResponse"
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/auth/{token}/reset-password": {
      "get": {
        "tags": ["Authentication"],
        "description": "Validate user token, and returns the users email if the token is valid",
        "summary": "Validate user token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      },
      "patch": {
        "tags": ["Authentication"],
        "summary": "Update profile password",
        "description": "If user is valid then he/she need to provide new secure password to complete the password reset process.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["email", "password"],
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/Authenticated"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/property": {
      "post": {
        "tags": ["Properties"],
        "summary": "Creating new property",
        "description": "Provide valid property details to create a new property",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "name": "title",
            "in": "formData",
            "type": "string",
            "required": true
          },
          {
            "name": "price",
            "in": "formData",
            "type": "number",
            "required": true
          },
          {
            "name": "state",
            "in": "formData",
            "type": "string",
            "required": true
          },
          {
            "name": "city",
            "in": "formData",
            "type": "string",
            "required": true
          },
          {
            "name": "address",
            "in": "formData",
            "type": "string",
            "required": true
          },
          {
            "name": "type",
            "in": "formData",
            "type": "string",
            "description": "property type include (e.g 2 bedroom, 3 bedroom)",
            "required": true
          },
          {
            "name": "billing_type",
            "in": "formData",
            "type": "string",
            "description": "billing type include (e.g per year, one time payment)",
            "required": true
          },
          {
            "name": "deal_type",
            "in": "formData",
            "type": "string",
            "description": "deal type include (e.g for sale, for rent)",
            "required": true
          },
          {
            "name": "description",
            "in": "formData",
            "type": "string",
            "description": "details of the property",
            "required": true
          },
          {
            "name": "images",
            "in": "formData",
            "type": "file",
            "multiple": true,
            "description": "deal type include (e.g for sale, for rent)",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#definitions/Property"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "500": {
            "$ref": "#responses/Standard500Error"
          }
        }
      },
      "get": {
        "tags": ["Properties"],
        "description": "Get all property adverts by sending request to this endpoint, so filter data by passing query string parameter (e.g price, location, type, deals)",
        "summary": "Get all property adverts",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "type": "string",
            "required": false
          },
          {
            "name": "location",
            "in": "query",
            "type": "string",
            "required": false
          },
          {
            "name": "deal",
            "in": "query",
            "type": "string",
            "required": false
          },
          {
            "name": "price",
            "in": "query",
            "type": "number",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/GetProperties"
            }
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/property/{propertyId}": {
      "get": {
        "tags": ["Properties"],
        "description": "Retrive single property advert by passing a url parameter",
        "summary": "Get a specific property advert.",
        "parameters": [
          {
            "$ref": "#parameters/propertyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/GetProperty"
            }
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      },
      "patch": {
        "tags": ["Properties"],
        "summary": "Update property",
        "description": "This endpoint enables advert owners to update the details of a particular property advert",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/propertyId"
          },
          {
            "name": "title",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "price",
            "in": "formData",
            "type": "number"
          },
          {
            "name": "state",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "city",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "address",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "type": "string",
            "description": "property type include (e.g 2 bedroom, 3 bedroom)"
          },
          {
            "name": "billing_type",
            "in": "formData",
            "type": "string",
            "description": "billing type include (e.g per year, one time payment)"
          },
          {
            "name": "deal_type",
            "in": "formData",
            "type": "string",
            "description": "deal type include (e.g for sale, for rent)"
          },
          {
            "name": "description",
            "in": "formData",
            "type": "string",
            "description": "details of the property"
          },
          {
            "name": "images",
            "in": "formData",
            "type": "file",
            "description": "deal type include (e.g for sale, for rent)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/Property"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "500": {
            "$ref": "#responses/Standard500Error"
          }
        }
      },
      "delete": {
        "tags": ["Properties"],
        "description": "This endpoint permanently remove a single property advert",
        "summary": "Remove a specific property advert.",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/propertyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#responses/SuccessResponse"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/property/{propertyId}/sold": {
      "patch": {
        "tags": ["Properties"],
        "summary": "Mark a property as sold",
        "description": "This endpiont enables users to mark a single property as sold",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/propertyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/Property"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "500": {
            "$ref": "#responses/Standard500Error"
          }
        }
      }
    },
    "/property/{propertyId}/activate": {
      "patch": {
        "tags": ["Properties"],
        "summary": "Activate or Deactivate suspicious advert",
        "description": "Admin can <span style='color:red'>activate</span> or <span style='color:red'>deactivate</span> an advert once reported by other users, and found suspicious by the admin",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/propertyId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "$ref": "#definitions/Property"
                }
              }
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all site users",
        "description": "This endpoint allows enables the site admin to manage all registered users",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "name": "search",
            "in": "query",
            "reuired": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/Users"
            }
          },
          "400": {
            "$ref": "#responses/Standard401Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "consumes": ["multipart/form-data"],
        "summary": "Update user profile",
        "description": "User can update their profile by making necessary changes",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "name": "first_name",
            "in": "formData"
          },
          {
            "name": "last_name",
            "in": "formData"
          },
          {
            "name": "phone_number",
            "in": "formData"
          },
          {
            "name": "address",
            "in": "formData"
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "$ref": "#definitions/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#responses/Standard401Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["Users"],
        "summary": "User profile",
        "description": "This endpoint allows logged in users to get their personal profile details",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/User"
            }
          },
          "400": {
            "$ref": "#responses/Standard401Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["Users"],
        "summary": "View user profile and adverts",
        "description": "Simply view a particular users (especially agent) profile details and his/her uploaded property advert",
        "parameters": [
          {
            "$ref": "#parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/UserProperties"
            }
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user profile",
        "description": "This endpoint gives admin the access to remove user profile account permanently from the site database",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#responses/SuccessResponse"
          },
          "400": {
            "$ref": "#responses/Standard401Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/users/{userId}/activate": {
      "patch": {
        "tags": ["Users"],
        "summary": "Activate user profile",
        "description": "This endpoint allows the users with admin privelleges to activate or deactivate user profile",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/User"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/users/{userId}/set-admin": {
      "patch": {
        "tags": ["Users"],
        "summary": "Set user as admin",
        "description": "This endpoint allow the users with admin privelleges to set and remove user as admin",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/User"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/flag": {
      "post": {
        "tags": ["Flags"],
        "description": "This endpoint allows users to report suspected adverts",
        "summary": "Flag property advert",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Flag a property advert",
            "schema": {
              "$ref": "#definitions/CreateFlag"
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "description": "Created",
              "$ref": "#definitions/FlagResponse"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          }
        }
      },
      "get": {
        "tags": ["Flags"],
        "description": "Get all properties flagged by users",
        "summary": "Get all flagged property",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "name": "search",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/Flags"
            }
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/flag/{flagId}": {
      "get": {
        "tags": ["Flags"],
        "description": "Here an admin can retrieve details of a flagged property",
        "summary": "Get flaged property",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "name": "flagId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/Flag"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      },
      "delete": {
        "tags": ["Flags"],
        "description": "Here an admin can remove a single property advert",
        "summary": "Delete flaged property",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "name": "flagId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#responses/SuccessResponse"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/favourites": {
      "get": {
        "tags": ["Favourites"],
        "summary": "Get user favourite property",
        "description": "Get the current login user favourites propertys advert",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#definitions/Favourites"
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/favourites/{propertyId}": {
      "post": {
        "tags": ["Favourites"],
        "summary": "Add property to favourites",
        "description": "This endpoint enable logged in user to add property to his/her favourites list for easy access later",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/propertyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#responses/SuccessResponse"
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/favourites/{favouriteId}": {
      "delete": {
        "tags": ["Favourites"],
        "summary": "Remove property from favourite list",
        "description": "This endpoint enables logged in users to remove property from his/her favourites list",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "name": "favouriteId",
            "in": "path",
            "type": "number",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#responses/SuccessResponse"
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          }
        }
      }
    },
    "/deals-types/deals": {
      "post": {
        "tags": ["Set Up"],
        "summary": "Add new deal",
        "description": "Add deals dynamically without bringing the site down when the need to add new one arise",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/setupBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "$ref": "#definitions/SetUp"
                }
              }
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          }
        }
      },
      "get": {
        "tags": ["Set Up"],
        "summary": "Retrieve all deals",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#definitions/SetUp"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          }
        }
      }
    },
    "/deals-types/deals/{id}": {
      "get": {
        "tags": ["Set Up"],
        "summary": "Retrieve single deal by its ID",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/setupId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "$ref": "#definitions/SetUp"
                }
              }
            }
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      },
      "patch": {
        "tags": ["Set Up"],
        "summary": "Update deal details",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/setupId"
          },
          {
            "$ref": "#parameters/setupBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "$ref": "#definitions/SetUp"
                }
              }
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      },
      "delete": {
        "tags": ["Set Up"],
        "summary": "Remove a deal",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/setupId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#responses/SuccessResponse"
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    },
    "/deals-types/types": {
      "post": {
        "tags": ["Set Up"],
        "summary": "Add new property types",
        "description": "Add property types dynamically without bringing the site down when the need to add new one arise",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/setupBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "$ref": "#definitions/SetUp"
                }
              }
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          }
        }
      },
      "get": {
        "tags": ["Set Up"],
        "summary": "Retrieve all property types",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#definitions/SetUp"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          }
        }
      }
    },
    "/deals-types/types/{id}": {
      "get": {
        "tags": ["Set Up"],
        "summary": "Retrieve single property type by its ID",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/setupId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "$ref": "#definitions/SetUp"
                }
              }
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      },
      "patch": {
        "tags": ["Set Up"],
        "summary": "Update property type details",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/setupId"
          },
          {
            "$ref": "#parameters/setupBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "$ref": "#definitions/SetUp"
                }
              }
            }
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      },
      "delete": {
        "tags": ["Set Up"],
        "summary": "Remove property type",
        "parameters": [
          {
            "$ref": "#parameters/x-auth-token"
          },
          {
            "$ref": "#parameters/setupId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#responses/SuccessResponse"
          },
          "400": {
            "$ref": "#responses/Standard400Error"
          },
          "401": {
            "$ref": "#responses/Standard401Error"
          },
          "403": {
            "$ref": "#responses/Standard403Error"
          },
          "404": {
            "$ref": "#responses/Standard404Error"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "email": {
          "type": "string",
          "example": "username@email.com"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "user_type": {
          "type": "string"
        },
        "reset_password_token": {
          "type": "string"
        },
        "reset_password_expires": {
          "type": "integer"
        },
        "is_active": {
          "type": "boolean",
          "example": false
        },
        "is_admin": {
          "type": "boolean",
          "example": false
        },
        "created_on": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Users": {
      "properties": {
        "status": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#definitions/User"
          }
        }
      }
    },
    "Property": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "owner": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "state": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "deal_type": {
          "type": "string"
        },
        "billing_type": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "created_on": {
          "type": "string",
          "format": "date"
        },
        "image_url": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        }
      }
    },
    "UserProperties": {
      "properties": {
        "status": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "properties": {
            "user": {
              "$ref": "#definitions/User"
            },
            "userAdverts": {
              "type": "array",
              "items": {
                "$ref": "#definitions/Property"
              }
            }
          }
        }
      }
    },
    "Authenticated": {
      "properties": {
        "status": {
          "type": "string",
          "example": "success"
        },
        "data": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
            },
            "id": {
              "type": "integer",
              "example": 1
            },
            "email": {
              "type": "string",
              "example": "username@email.com"
            },
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "phone_number": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "user_type": {
              "type": "string"
            },
            "reset_password_token": {
              "type": "string"
            },
            "reset_password_expires": {
              "type": "integer"
            },
            "is_active": {
              "type": "boolean",
              "example": false
            },
            "is_admin": {
              "type": "boolean",
              "example": false
            },
            "created_on": {
              "type": "string",
              "format": "date"
            }
          }
        }
      }
    },
    "Login": {
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "GetProperty": {
      "properties": {
        "status": {
          "type": "integer"
        },
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "status": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "price": {
              "type": "number"
            },
            "created_on": {
              "type": "string",
              "format": "date"
            },
            "image_url": {
              "type": "string"
            },
            "owner": {
              "type": "number"
            },
            "owner_email": {
              "type": "string"
            },
            "owner_phone": {
              "type": "string"
            }
          }
        }
      }
    },
    "GetProperties": {
      "properties": {
        "status": {
          "type": "integer"
        },
        "data": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "integer"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "price": {
                "type": "number"
              },
              "created_on": {
                "type": "string",
                "format": "date"
              },
              "image_url": {
                "type": "string"
              },
              "owner": {
                "type": "number"
              },
              "owner_email": {
                "type": "string"
              },
              "owner_phone": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Favourites": {
      "properties": {
        "favourite_id": {
          "type": "integer"
        },
        "property_id": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "state": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "billing_type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "deal_type": {
          "type": "string"
        },
        "owner_id": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "created_on": {
          "type": "string",
          "format": "date"
        },
        "image_url": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateFlag": {
      "required": ["property_id", "name", "email", "reason"],
      "properties": {
        "property_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Flag": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "property_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "agent_id": {
          "type": "integer"
        },
        "agent_name": {
          "type": "string"
        },
        "created_on": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Flags": {
      "properties": {
        "status": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#definitions/Flag"
          }
        }
      }
    },
    "FlagResponse": {
      "properties": {
        "status": {
          "type": "string"
        },
        "data": {
          "properties": {
            "id": {
              "type": "integer"
            },
            "property_id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "created_on": {
              "type": "string",
              "format": "date"
            }
          }
        }
      }
    },
    "SetUp": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Error": {
      "properties": {
        "status": {
          "type": "string",
          "example": "error"
        },
        "error": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "Standard204Response": {
      "description": "No content found"
    },
    "Standard400Error": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#definitions/Error"
      }
    },
    "SuccessResponse": {
      "description": "OK",
      "schema": {
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Standard401Error": {
      "description": "Access Denied - Invalid access token",
      "schema": {
        "$ref": "#definitions/Error"
      }
    },
    "Standard403Error": {
      "description": "Access Forbidden - No authorize access",
      "schema": {
        "$ref": "#definitions/Error"
      }
    },
    "Standard404Error": {
      "description": "Resource not found",
      "schema": {
        "$ref": "#definitions/Error"
      }
    },
    "Standard500Error": {
      "description": "An unexpected error has occur",
      "schema": {
        "$ref": "#definitions/Error"
      }
    }
  },
  "parameters": {
    "x-auth-token": {
      "name": "x-auth-token",
      "in": "header",
      "type": "string",
      "required": true
    },
    "propertyId": {
      "name": "propertyId",
      "in": "path",
      "type": "integer",
      "required": true
    },
    "userId": {
      "name": "userId",
      "in": "path",
      "type": "integer",
      "required": true
    },
    "setupId": {
      "name": "id",
      "in": "path",
      "type": "string",
      "required": true
    },
    "setupBody": {
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      }
    }
  }
}
