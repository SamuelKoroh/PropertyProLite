{"version":3,"sources":["../../server/controllers/auth.js"],"names":["jwtSecret","process","env","JWT_SECRET","signUp","body","file","res","errors","Joi","validate","signupSchema","error","details","message","user","Users","find","u","email","salt","bcrypt","genSalt","password","hash","id","length","is_admin","is_active","created_on","result","cloudinary","v2","uploader","upload","path","image","secure_url","push","token","jwt","sign","_","pick","expiresIn","omit","signIn","signinSchema","validPassword","compare","sendResetLink","emailSchema","crypto","randomBytes","toString","resetPasswordToken","resetPasswordExpires","Date","now","text","mail","Mail","sendMail","validateUrlToken","params","parseInt","updateUserPassword"],"mappings":"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","sourcesContent":["import Joi from 'joi';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport _ from 'lodash';\nimport crypto from 'crypto';\nimport cloudinary from 'cloudinary';\nimport Mail from '../utils/mail';\nimport Users from '../models/Users';\nimport { okResponse, badRequest } from '../utils/refractory';\nimport { signupSchema, signinSchema, emailSchema } from '../middleware/modelValidation';\nimport curDate from '../utils/date';\n\nconst jwtSecret = process.env.JWT_SECRET;\n\n/*\n@@ Route          /api/v1/auth/signup\n@@ Method         POST\n@@ Description    Create user account\n*/\nexport const signUp = async ({ body, file }, res) => {\n  const errors = Joi.validate(body, signupSchema);\n  if (errors.error) return badRequest(res, errors.error.details[0].message, 400);\n\n  let user = Users.find(u => u.email === body.email);\n  if (user) return badRequest(res, 'This email has been registered already', 400);\n\n  try {\n    const salt = await bcrypt.genSalt(10);\n    const password = await bcrypt.hash(body.password, salt);\n\n    user = {\n      id: Users.length + 1,\n      ...body,\n      is_admin: false,\n      password,\n      is_active: true,\n      created_on: curDate()\n    };\n\n    if (file) {\n      const result = await cloudinary.v2.uploader.upload(file.path);\n      user.image = result.secure_url;\n    }\n\n    Users.push(user);\n    user.token = await jwt.sign(_.pick(user, ['id', 'is_admin', 'user_type']), jwtSecret, {\n      expiresIn: 36000\n    });\n    return okResponse(res, { ..._.omit(user, ['password']) }, 201);\n  } catch (error) {\n    badRequest(res, 'Image not valid', 400);\n  }\n};\n\n/*\n@@ Route          /api/v1/auth/signIn\n@@ Method         POST\n@@ Description    Login a user\n*/\nexport const signIn = async ({ body }, res) => {\n  try {\n    const errors = Joi.validate(body, signinSchema);\n    if (errors.error) return badRequest(res, errors.error.details[0].message, 400);\n\n    const user = Users.find(u => u.email === body.email);\n    if (!user) return badRequest(res, 'Invalid username and password', 400);\n\n    const validPassword = await bcrypt.compare(body.password, user.password);\n    if (!validPassword) return badRequest(res, 'Invalid username and password', 400);\n\n    const token = await jwt.sign(_.pick(user, ['id', 'is_admin', 'user_type']), jwtSecret, {\n      expiresIn: 36000\n    });\n\n    return okResponse(res, { token, ..._.omit(user, ['password']) });\n  } catch (error) {\n    badRequest(res, 'An unexpected error has occour', 500);\n  }\n};\n\nexport const sendResetLink = async ({ body }, res) => {\n  const errors = Joi.validate(body, emailSchema);\n  if (errors.error) return badRequest(res, errors.error, 400);\n\n  const user = Users.find(u => u.email === body.email);\n  if (!user) return badRequest(res, 'The account does not exist');\n\n  const token = crypto.randomBytes(20).toString('hex');\n  user.resetPasswordToken = token;\n  user.resetPasswordExpires = Date.now() + 360000;\n\n  const text = 'You are receiving this because you (or some else) have requested the reset of the password for your account.\\n\\n'\n    + 'Please click on the following link, or paste this into your browser to complete the process within one hour of receiving it: \\n\\n'\n    + `http://localhost:3500/api/v1/auth/reset-password/${token}\\n\\n`\n    + 'If you did not request this, please ignore this email and your password will remain unchanged.\\n';\n\n  const mail = new Mail('Property Pro', user.email, 'Reset Password', text);\n  const result = await mail.sendMail();\n  if (result !== 'sent') return badRequest(res, result, 400);\n  okResponse(res, { message: 'The link to rest your profile has been sent to this email address' });\n};\n\nexport const validateUrlToken = ({ params }, res) => {\n  const user = Users.find(\n    u =>\n      u.resetPasswordToken === params.token\n      && parseInt(u.resetPasswordExpires, 10) > parseInt(Date.now(), 10)\n  );\n  if (!user) return badRequest(res, 'The reset link is invalid or has expired');\n  okResponse(res, { email: user.email });\n};\n\nexport const updateUserPassword = async ({ body, params }, res) => {\n  const errors = Joi.validate(body, signinSchema);\n  if (errors.error) return badRequest(res, errors.error, 400);\n\n  const user = Users.find(u => u.email === body.email && u.resetPasswordToken === params.token);\n  if (!user) return badRequest(res, 'The profile account does not exists');\n\n  const salt = await bcrypt.genSalt(10);\n  user.password = await bcrypt.hash(body.password, salt);\n  user.resetPasswordExpires = null;\n  user.resetPasswordToken = null;\n  user.token = await jwt.sign(_.pick(user, ['id', 'is_admin', 'user_type']), jwtSecret, {\n    expiresIn: 360000\n  });\n\n  return okResponse(res, _.omit(user, ['password']));\n};\n"],"file":"auth.js"}