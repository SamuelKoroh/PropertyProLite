{"version":3,"sources":["../../server/controllers/favourites.js"],"names":["getFavourite","favouritePropertyId","user","Favourites","find","f","parseInt","id","user_id","property_id","removeFavourite","favourite","index","indexOf","splice","saveFavourites","params","res","propertyId","message","length","push","getFavourites","favourites","filter","myFavourites","map","property","Properties","p","favorite_id","owner_id","owner","_","omit","deleteFavourite","favouriteId"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport Favourites from '../models/Favourites';\nimport { okResponse, badRequest } from '../utils/refractory';\nimport Properties from '../models/Properties';\n\nconst getFavourite = (favouritePropertyId, user) => {\n  return Favourites.find(\n    f =>\n      (parseInt(f.id, 10) === parseInt(favouritePropertyId, 10)\n        && parseInt(f.user_id, 10) === parseInt(user.id, 10))\n      || (parseInt(f.property_id, 10) === parseInt(favouritePropertyId, 10)\n        && parseInt(f.user_id, 10) === parseInt(user.id, 10))\n  );\n};\nconst removeFavourite = (favourite) => {\n  const index = Favourites.indexOf(favourite);\n  Favourites.splice(index, 1);\n  return 'The property has been removed';\n};\n\nexport const saveFavourites = ({ params, user }, res) => {\n  const { propertyId } = params;\n  let favourite = getFavourite(propertyId, user);\n  if (favourite) return okResponse(res, { message: removeFavourite(favourite) });\n  favourite = { id: Favourites.length + 1, user_id: user.id, property_id: propertyId };\n  Favourites.push(favourite);\n  okResponse(res, { message: 'The property has been saved to your favourite list' });\n};\n\nexport const getFavourites = ({ user }, res) => {\n  const favourites = Favourites.filter(f => parseInt(f.user_id, 10) === parseInt(user.id, 10));\n  const myFavourites = favourites.map((f) => {\n    const property = Properties.find(p => parseInt(p.id, 10) === parseInt(f.property_id, 10));\n    return {\n      favorite_id: f.id,\n      property_id: property.id,\n      owner_id: property.owner,\n      ..._.omit(property, ['id', 'owner'])\n    };\n  });\n  okResponse(res, myFavourites);\n};\n\nexport const deleteFavourite = ({ params, user }, res) => {\n  const favourite = getFavourite(params.favouriteId, user);\n  if (!favourite) return badRequest(res, 'The property does not exist', 404);\n  okResponse(res, { message: removeFavourite(favourite) });\n};\n"],"file":"favourites.js"}