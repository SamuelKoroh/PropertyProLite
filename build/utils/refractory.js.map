{"version":3,"sources":["../../server/utils/refractory.js"],"names":["okResponse","res","data","code","status","json","badRequest","msg","error","removeItem","Collection","params","item","find","p","parseInt","id","index","indexOf","splice","message","updateItem","body","keys","Object","forEach","key","getItem","addItem","length","push"],"mappings":"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","sourcesContent":["export const okResponse = (res, data, code = 200) => {\n  return res.status(code).json({ status: 'success', data });\n};\n\nexport const badRequest = (res, msg, code = 404) => {\n  return res.status(code).json({ status: 'error', error: msg });\n};\n\nexport const removeItem = (Collection, params, res) => {\n  const item = Collection.find(p => parseInt(p.id, 10) === parseInt(params.id, 10));\n  if (!item) return badRequest(res, 'The item does not exist');\n  const index = Collection.indexOf(item);\n  Collection.splice(index, 1);\n  okResponse(res, { message: 'The item has been removed' });\n};\nexport const updateItem = (Collection, body, params, res) => {\n  const item = Collection.find(p => parseInt(p.id, 10) === parseInt(params.id, 10));\n  if (!item) return badRequest(res, 'The item does not exist');\n  const keys = Object.keys(body);\n  keys.forEach((key) => {\n    item[key] = body[key];\n  });\n  okResponse(res, item);\n};\nexport const getItem = (Collection, params, res) => {\n  const item = Collection.find(p => parseInt(p.id, 10) === parseInt(params.id, 10));\n  if (!item) return badRequest(res, 'The item does not exist');\n  okResponse(res, item);\n};\nexport const addItem = (Collection, body, res) => {\n  const item = { id: Collection.length + 1, ...body };\n  Collection.push(item);\n  okResponse(res, item);\n};\n"],"file":"refractory.js"}