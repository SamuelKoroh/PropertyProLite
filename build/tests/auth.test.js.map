{"version":3,"sources":["../../server/tests/auth.test.js"],"names":["user","newUser","describe","before","app","post","send","validUser","email","password","it","status","to","equal","filePath","__dirname","result","field","attach","set","validLogin","body","data","newUserLogin","get","resetPasswordToken","patch"],"mappings":"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","sourcesContent":["import request from 'supertest';\nimport { expect } from 'chai';\nimport app from '../app';\nimport { validUser, validLogin } from '../testdata/auth';\n\nlet user = '';\nlet newUser;\ndescribe('/api/v1/auth', () => {\n  before(async () => {\n    user = await request(app)\n      .post('/api/v1/auth/signup')\n      .send(validUser);\n\n    newUser = await request(app)\n      .post('/api/v1/auth/signup')\n      .send({ ...validUser, email: 'godwin4koroh@gmail.com', password: 'admin' });\n  });\n\n  describe('POST /signup', () => {\n    it('should return 201 if provide with valid data', async () => {\n      expect(user.status).to.equal(201);\n    });\n    it('should return 201 if provide with valid data and image', async () => {\n      const filePath = `${__dirname}/user.png`;\n      const result = await request(app)\n        .post('/api/v1/auth/signup')\n        .field('email', 'imagetest@test.com')\n        .field('password', 'secret')\n        .field('first_name', 'Ibadan')\n        .field('last_name', 'Ojoo')\n        .field('phone_number', '20 agodi oojoo')\n        .field('address', '45 rooms in a duples')\n        .field('user_type', 'per year')\n        .attach('image', filePath);\n      expect(result.status).to.equal(201);\n    });\n    it('should return 500 if image is not valid', async () => {\n      const filePath = `${__dirname}/badimage.txt`;\n      const result = await request(app)\n        .post('/api/v1/auth/signup')\n        .field('email', 'imagetest@test.com')\n        .field('password', 'secret')\n        .field('first_name', 'Ibadan')\n        .field('last_name', 'Ojoo')\n        .field('phone_number', '20 agodi oojoo')\n        .field('address', '45 rooms in a duples')\n        .field('user_type', 'per year')\n        .attach('image', filePath);\n      expect(result.status).to.equal(500);\n    });\n    it('should return 400 if provide with invalid data', async () => {\n      const result = await request(app)\n        .post('/api/v1/auth/signup')\n        .send({ email: 'john', password: 'password' });\n      expect(result.status).to.equal(400);\n    });\n    it('should return 400 if provided with already existing email', async () => {\n      const result = await request(app)\n        .post('/api/v1/auth/signup')\n        .send(validUser);\n      expect(result.status).to.equal(400);\n    });\n  });\n\n  describe('POST /signin', () => {\n    it('should return 200 if successful login', async () => {\n      const result = await request(app)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send(validLogin);\n      expect(result.status).to.equal(200);\n    });\n    it('should return 400 if provided with no values', async () => {\n      const result = await request(app)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send({});\n      expect(result.status).to.equal(400);\n    });\n    it('should return 400 if provided with invalid credential', async () => {\n      const result = await request(app)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send({ email: 'demo@demo.com', password: 'demopassword' });\n      expect(result.status).to.equal(400);\n    });\n    it('should return 400 if provided with valid email but wrong password', async () => {\n      const result = await request(app)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send({ ...validLogin, password: 'secret45' });\n      expect(result.status).to.equal(400);\n    });\n  });\n\n  describe('POST /reset-password', () => {\n    it('should return 400 if the recovery email is not valid', async () => {\n      const result = await request(app)\n        .post('/api/v1/auth/reset-password')\n        .set('content-type', 'application/json')\n        .send({});\n      expect(result.status).to.equal(400);\n    });\n    it('should return 404 if the recovery email is not attached to an account', async () => {\n      const result = await request(app)\n        .post('/api/v1/auth/reset-password')\n        .set('content-type', 'application/json')\n        .send({ email: 'nomatch@gmail.com' });\n      expect(result.status).to.equal(404);\n    });\n    it('should return 200 if recovery email is valid and mail was sent', async () => {\n      const result = await request(app)\n        .post('/api/v1/auth/reset-password')\n        .set('content-type', 'application/json')\n        .send({ email: newUser.body.data.email });\n      expect(result.status).to.equal(200);\n    });\n  });\n\n  describe('GET /:token', () => {\n    let newUserLogin;\n    before(async () => {\n      newUserLogin = await request(app)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send({ email: newUser.body.data.email, password: 'admin' });\n    });\n    it('should return 404 if the reset password token has expired or not valid', async () => {\n      const result = await request(app)\n        .get(`/api/v1/auth/reset-password/${newUserLogin.body.data.resetPasswordToken}dd`)\n        .set('content-type', 'application/json');\n      expect(result.status).to.equal(404);\n    });\n    it('should return 200 if the reset password token is valid', async () => {\n      const result = await request(app)\n        .get(`/api/v1/auth/reset-password/${newUserLogin.body.data.resetPasswordToken}`)\n        .set('content-type', 'application/json');\n      expect(result.status).to.equal(200);\n    });\n  });\n\n  describe('PATCH /reset-password', () => {\n    let newUserLogin;\n    before(async () => {\n      newUserLogin = await request(app)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send({ email: newUser.body.data.email, password: 'admin' });\n    });\n    it('should return 400 if it does not contain email and password', async () => {\n      const result = await request(app)\n        .patch(`/api/v1/auth/reset-password/${newUserLogin.body.data.resetPasswordToken}`)\n        .set('content-type', 'application/json')\n        .send({});\n      expect(result.status).to.equal(400);\n    });\n    it('should return 404 if the email is not attached to an account', async () => {\n      const result = await request(app)\n        .patch(`/api/v1/auth/reset-password/${newUserLogin.body.data.resetPasswordToken}`)\n        .set('content-type', 'application/json')\n        .send({ email: 'nomatch@gmail.com', password: 'admin' });\n      expect(result.status).to.equal(404);\n    });\n    it('should return 200 if  email and password is valid ', async () => {\n      const result = await request(app)\n        .patch(`/api/v1/auth/reset-password/${newUserLogin.body.data.resetPasswordToken}`)\n        .set('content-type', 'application/json')\n        .send({ email: newUser.body.data.email, password: 'admin' });\n      expect(result.status).to.equal(200);\n    });\n  });\n});\n"],"file":"auth.test.js"}