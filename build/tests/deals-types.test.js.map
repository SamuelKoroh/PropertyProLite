{"version":3,"sources":["../../server/tests/deals-types.test.js"],"names":["describe","admin","propertyDeal","propertyType","before","app","post","set","send","email","password","body","data","token","name","description","it","status","to","equal","result","get","patch","delete"],"mappings":"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","sourcesContent":["import request from 'supertest';\nimport { expect } from 'chai';\nimport app from '../app';\n\ndescribe('/api/v1/deals-types', () => {\n  let admin = '';\n  let propertyDeal;\n  let propertyType;\n  before(async () => {\n    admin = await request(app)\n      .post('/api/v1/auth/signin')\n      .set('Content-Type', 'application/json')\n      .send({ email: 'admin@gmail.com', password: 'admin' });\n\n    propertyDeal = await request(app)\n      .post('/api/v1/deals-types/deals')\n      .set('x-auth-token', admin.body.data.token)\n      .send({ name: 'for lease', description: 'for leasing properties' });\n\n    propertyType = await request(app)\n      .post('/api/v1/deals-types/types')\n      .set('x-auth-token', admin.body.data.token)\n      .send({ name: '1 bedroom flat', description: '1 bedroom flat users' });\n  });\n\n  describe('POST /deals', () => {\n    it('should return 200 if the property deal was saved', async () => {\n      expect(propertyDeal.status).to.equal(200);\n    });\n  });\n  describe('GET /deals', () => {\n    it('should return 200 if all property deals are return', async () => {\n      const result = await request(app)\n        .get('/api/v1/deals-types/deals')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n  });\n  describe('GET /deals/:id', () => {\n    it('should return 404 if no matching record', async () => {\n      const result = await request(app)\n        .get('/api/v1/deals-types/deals/10000')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(404);\n    });\n    it('should return 200 if there is a matching record', async () => {\n      const result = await request(app)\n        .get('/api/v1/deals-types/deals/1')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n  });\n  describe('PATCH /deals/:id', () => {\n    it('should return 404 if no matching record', async () => {\n      const result = await request(app)\n        .patch('/api/v1/deals-types/deals/10000')\n        .set('x-auth-token', admin.body.data.token)\n        .send({ description: ' Properties for rent' });\n      expect(result.status).to.equal(404);\n    });\n    it('should return 200 if there is a matching record', async () => {\n      const result = await request(app)\n        .patch('/api/v1/deals-types/deals/1')\n        .set('x-auth-token', admin.body.data.token)\n        .send({ description: ' Properties for rent' });\n      expect(result.status).to.equal(200);\n    });\n  });\n  describe('DELETE /deals/:id', () => {\n    it('should return 404 if no matching record', async () => {\n      const result = await request(app)\n        .delete('/api/v1/deals-types/deals/10000')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(404);\n    });\n    it('should return 200 if the record is deleted', async () => {\n      const result = await request(app)\n        .delete('/api/v1/deals-types/deals/1')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n  });\n\n  describe('POST /types', () => {\n    it('should return 200 if the property deal was saved', async () => {\n      expect(propertyType.status).to.equal(200);\n    });\n  });\n  describe('GET /types', () => {\n    it('should return 200 if all property types are return', async () => {\n      const result = await request(app)\n        .get('/api/v1/deals-types/types')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n  });\n  describe('GET /types/:id', () => {\n    it('should return 404 if no matching record', async () => {\n      const result = await request(app)\n        .get('/api/v1/deals-types/types/10000')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(404);\n    });\n    it('should return 200 if there is a matching record', async () => {\n      const result = await request(app)\n        .get('/api/v1/deals-types/types/1')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n  });\n  describe('PATCH /deals/:id', () => {\n    it('should return 404 if no matching record', async () => {\n      const result = await request(app)\n        .patch('/api/v1/deals-types/types/10000')\n        .set('x-auth-token', admin.body.data.token)\n        .send({ description: '3 room floor' });\n      expect(result.status).to.equal(404);\n    });\n    it('should return 200 if there is a matching record', async () => {\n      const result = await request(app)\n        .patch('/api/v1/deals-types/types/1')\n        .set('x-auth-token', admin.body.data.token)\n        .send({ description: ' nice home' });\n      expect(result.status).to.equal(200);\n    });\n  });\n  describe('DELETE /deals/:id', () => {\n    it('should return 404 if no matching record', async () => {\n      const result = await request(app)\n        .delete('/api/v1/deals-types/types/10000')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(404);\n    });\n    it('should return 200 if the record is deleted', async () => {\n      const result = await request(app)\n        .delete('/api/v1/deals-types/types/1')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n  });\n});\n"],"file":"deals-types.test.js"}