{"version":3,"sources":["../../server/tests/flags.test.js"],"names":["describe","admin","flaged","before","app","post","set","send","email","password","field","it","result","name","status","to","equal","reason","description","property_id","get","body","data","token","delete"],"mappings":"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","sourcesContent":["import request from 'supertest';\nimport { expect } from 'chai';\nimport app from '../app';\n// import { validUser } from '../testdata/auth';\n// import { validProperty } from '../testdata/property';\n\ndescribe('/api/v1/flag', () => {\n  let admin = '';\n  let flaged = '';\n  before(async () => {\n    admin = await request(app)\n      .post('/api/v1/auth/signin')\n      .set('Content-Type', 'application/json')\n      .send({ email: 'admin@gmail.com', password: 'admin' });\n\n    flaged = await request(app)\n      .post('/api/v1/auth/signup')\n      .field('email', 'agent@agent.com')\n      .field('password', 'agent')\n      .field('first_name', 'Ibadan')\n      .field('last_name', 'Ojoo')\n      .field('phone_number', '20 agodi oojoo')\n      .field('address', '45 rooms in a duples')\n      .field('user_type', 'per year');\n  });\n  describe('POST  /', () => {\n    it('should return 400 if the request body is not valid', async () => {\n      const result = await request(app)\n        .post('/api/v1/flag')\n        .set('Content-Type', 'application/json')\n        .send({ email: 'admin@gmail.com', name: 'admin' });\n      expect(result.status).to.equal(400);\n    });\n    it('should return 200 if the request body is valid', async () => {\n      const result = await request(app)\n        .post('/api/v1/flag')\n        .set('Content-Type', 'application/json')\n        .send({\n          email: 'reporter1@gmail.com',\n          name: 'sarah',\n          reason: 'wierd demand',\n          description: 'wierd demand from agent',\n          property_id: 2\n        });\n      expect(result.status).to.equal(200);\n    });\n  });\n  describe('GET /', () => {\n    it('it should return 403 if the user acces is forbidden', async () => {\n      const result = await request(app)\n        .get('/api/v1/flag')\n        .set('x-auth-token', flaged.body.data.token);\n      expect(result.status).to.equal(403);\n    });\n    it('it should return 404 if there are no record returned by using query parameter', async () => {\n      const result = await request(app)\n        .get('/api/v1/flag?search=hhhhhhhhhhhhhhhhhh')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(404);\n    });\n    it('it should return 200 if there are one or more records by using name query string', async () => {\n      const result = await request(app)\n        .get('/api/v1/flag?search=sarah')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n    it('it should return 200 if there are one or more records by using reason query string', async () => {\n      const result = await request(app)\n        .get('/api/v1/flag?search=wierd')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n    it('it should return 200 if there are one or more records by using email query string', async () => {\n      const result = await request(app)\n        .get('/api/v1/flag?search=reporter')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n    it('it should return 200 if there are one or more records', async () => {\n      const result = await request(app)\n        .get('/api/v1/flag')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n  });\n\n  describe('GET /:flagId', () => {\n    it('it should return 404 if there is no matching record', async () => {\n      const result = await request(app)\n        .get('/api/v1/flag/10000')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(404);\n    });\n    it('it should return 200 if there is matching record', async () => {\n      const result = await request(app)\n        .get('/api/v1/flag/1')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n  });\n  describe('DELETE /:flagId', () => {\n    it('it should return 404 if there is no matching record', async () => {\n      const result = await request(app)\n        .delete('/api/v1/flag/10000')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(404);\n    });\n\n    it('should return 200 successfully remove the flag', async () => {\n      const result = await request(app)\n        .delete('/api/v1/flag/1')\n        .set('x-auth-token', admin.body.data.token);\n      expect(result.status).to.equal(200);\n    });\n  });\n});\n\n// Favourites Test\n"],"file":"flags.test.js"}